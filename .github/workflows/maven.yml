name: "java_app_pipeline"

on:
  push:
     branches: [ main ]
   # branches: [ main, develop, "feature/*", "hotfix/*", "release/*" ] a
    
  pull_request:
   
    branches: [ develop ]

jobs:
  
  Codebuild:
    name: Codebuild
    runs-on: ubuntu-latest
    env:
     MY_TOKEN: ${{ secrets.GITTOKEN }}
  
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
         java-version: '11'
         distribution: 'temurin'
         cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml
    
      
  sonar:
      name: Test - SonarCloud Scan
      runs-on: ubuntu-latest
      needs: [ Codebuild ]
      steps:
        - uses: actions/checkout@v1
        - name: Set up JDK 11
          uses: actions/setup-java@v1
          with:
           java-version: 11.0.4
        - name: SonarCloud Scan
          run: mvn -B clean verify -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           
  check_quality:
    name: Check Sonar Report Quality
    runs-on: ubuntu-latest
    needs: [sonar]
    env:
      CODE_SMELLS_THRESHOLD: "0"
      VULNERABILITIES_THRESHOLD: "0"
      BUGS_THRESHOLD: "0"
    steps:
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: Retrieve SonarCloud Metrics
        id: retrieve_metrics
        run: |
          SONAR_RESPONSE=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
                          "https://sonarcloud.io/api/measures/component?component=Shara-org_sample-java-repo&metricKeys=code_smells,vulnerabilities,bugs")
          echo "::set-output name=sonar_response::$SONAR_RESPONSE"
      - name: Check Sonar Report
        run: |
          SONAR_RESPONSE='${{ steps.retrieve_metrics.outputs.sonar_response }}'
          CODE_SMELLS=$(echo "$SONAR_RESPONSE" | jq -r '.component.measures[] | select(.metric == "code_smells") | .value')
          VULNERABILITIES=$(echo "$SONAR_RESPONSE" | jq -r '.component.measures[] | select(.metric == "vulnerabilities") | .value')
          BUGS=$(echo "$SONAR_RESPONSE" | jq -r '.component.measures[] | select(.metric == "bugs") | .value')
          echo "CODE_SMELLS: $CODE_SMELLS"
          echo "VULNERABILITIES: $VULNERABILITIES"
          echo "BUGS: $BUGS"
          if [[ $CODE_SMELLS -gt $CODE_SMELLS_THRESHOLD || $VULNERABILITIES -gt $VULNERABILITIES_THRESHOLD || $BUGS -gt $BUGS_THRESHOLD ]]; then
          echo "Sonar report does not meet quality standards. Exiting with an error."
          exit 1
          else
          echo "Sonar report meets quality standards."
          fi
